웹 프로젝트

산 데이터 - 수집
프로젝트에 제공할 산의 정보를 수집하기 위해 공공 데이터와 100대 명산 등산로의 gpx 파일을 사용했습니다.

산 데이터 - 정제, 전처리
1. 파이썬을 통해 API를 호출하여 받아온 결과 값 중 결측값을 제거하고,
 필요로 하는 데이터를 산의 정보로 정제하였고,
2. gpx 파일을 읽어들여 마찬가지로 결측값을 제거한 뒤,
 공통분모로 묶어 등산로 및 등산로에 포함된 웨이포인트 정보를 만들었습니다.'

API호출, 결측값

산 데이터 - 적재
이후 현 화면에 보이는 ERD와 같이 형성해 둔 RDS의 MySQL과 통신하여
생성된 정보를 외부에 파일로 저장함과 동시에 DB에 적재하였습니다.

다음은 웹 구성입니다.

유즈케이스 화면
웹 사이트의 개발 과정을 설명드리기에 앞서 간단한 표를 보여드리겠습니다.

웹 프로젝트 - 기능 설계
프로젝트에서 필요한 기능들을 정의한 문서입니다.

-------------------------------- 

웹 프로젝트 - 변경점
프로젝트가 기점을 지날 때마다 JDBC, MySQL을 거쳐 JPA로 최신화했습니다.

웹 프로젝트 - 변경점
기존 프로젝트에서는 Maven을 통한 의존성 관리나 빌드를 수행했지만 트렌드에 따라 Gradle을 적용해 보았습니다.

웹 프로젝트 - 변경점
카카오 MAP api를 활용하였습니다.
API를 사용할 도메인을 매핑한 뒤 호출하였고,
산 상세 페이지 진입 시와 등산로 선택 시 산에 속한 등산로를 지도에 그려줍니다.

로그인 및 회원가입 - 

이번 프로젝트에서는
카카오, 네이버, 구글의 로그인을 통한 인증 후
회원가입을 진행하게끔 변경했습니다.
이유는 무분별하게 회원가입이 되는 것을 막고자 진행했습니다.

1. 각 인증 후 이메일을 저장하여 아이디로 사용한다.
이메일을 아이디로 가져오는 것까진 좋지만,
카카오에서는 네이버이메일도 포함한 각기 다른 이메일주소도 있기에
오히려 헷갈릴 이유가 있다고 판단이 되었고,

그래서 마지막 방식인 카카오, 네이버, 구글 로그인으로 인증하고 회원가입을
진행하는 방식으로 변경하였습니다.

각 3사 로그인을 한다면 회원가입을 진행하는 문구와 함께 회원가입페이지로 이동합니다.

여기까지 이번 프로젝트 회원가입방식 변경부분이였습니다.

웹 프로젝트 - 비밀번호 암호화
회원가입 및 로그인 시 비밀번호가 암호화 되어 DB에 저장됩니다. 

카카오, 네이버, 구글 API 설정 주의점

웹 프로젝트 - 산 검색
산 검색의 프로세스입니다. 호출된 지점과 조건에 따라 동작이 달라지게 됩니다.

웹 프로젝트 - 산 상세 진입
산 상세 진입 과정에서의 프로세스입니다. 진입한 산의 정보와 포함된 등산로 정보를 불러옵니다.

웹 프로젝트 - 등산로 표시
등산로 표시 프로세스입니다.
산 상세 페이지에서 등산로를 선택할 경우 해당 등산로의 좌표를 불러와 지도에 동선을 그려줍니다.

웹 프로젝트 - 기능 명세, 테스트
Swagger 문서를 통해 개발에 사용한 API들을 테스트하였습니다.

웹 프로젝트 - 버전 관리
프로젝트를 진행하며 Git을 통해 기능 개발, 버전 관리, 배포를 수행했습니다.

웹 프로젝트 - 배포
AWS EC2에 java, git 등을 설치한 후 프로젝트를 clone 받은 다음 gradle을 통해 build 후 스프링 부트 내장 서버를 통해 배포하였습니다.


데이터 분석

1. 등산객의 편의를 위한 목적으로 산불/강우 예측시스템을 개발하기 위한 데이터 분석을 진행했습니다.

2. 데이터 처리부분입니다.
///데이터분석에 앞서 데이터를 준비할 필요가 있습니다.///
 
3. 먼저 산악기상정보와 산불통계를 크롤링 등을 이용하여 수집했습니다.
 결측값을 제거하고, 평균값이나 0으로 대체하는 등 산악기상 데이터 정제는 파이썬을 활용했습니다.
 적재부분은 하둡과 스파크를 활용하여 산불통계를 맵리듀스하여 적재했습니다.

4. 결과 데이터입니다.
   왼쪽은 맵리듀스한 산불통계,
   오른쪽은 각각 산불 발생과 강우발생을 매핑한 데이터 결과 입니다.

5. 이렇게 준비된 데이터를 가공하여 데이터 분석의 성능을 높일 필요가 있습니다.
데이터 가공 및 시각화에는 저희가 과정에서 계속 사용해온 라이브러리를 활용했습니다.

6. 먼저 스케일링과 인코딩을 통해 변수의 범위를 맞춰주고, 
   eda에서 변수 간 상관관계를 확인하고 기초 통계분석을 하였습니다. 
  
   1) 통계 결과를 chiking 사이트에 구현하였는데 그 이유는 탐색해본 결과 
     실화 원인 중 입산객의 비중이 가장 커서 사전에 주의하도록 홍보할 필요가 있다고 생각했기 때문입니다.
   2)  나아가 산악기상변수가 연속형변수인 피해면적이나 강우량보다 
       발생 여부로 판단하는 범주형 변수와의 상관성이 높아 분류 알고리즘을 사용하는 방향으로 기획했습니다.

7.  이러한 결과를 바탕으로 산불/강우 예측 알고리즘 적용결과를 비교해보도록 하겠습니다.

8.  산불데이터를 대상으로 알고리즘 별 머신러닝을 진행한 결과입니다. 
    랜덤포레스트는 학습이 3분 정도인데 정확도는 약 0.85에 불과해 효율성이 떨어졌고,
    XGBoost와 LightGBM은 초단위로 속도는 빨랐지만 파라미터 변경에도 과적합이 계속 발생하였습니다.
    CatBoost로 적용한 결과 속도도 빠르고 정확도도 약 0.96으로 높게 나왔습니다.

9. 따라서 속도와 성능 측면에서 CatBoost를 선택하였고, 이후 교차검증 및 베이지안 최적화를 진행했습니다.
   해당 결과를 산 통합정보사이트에 게시하였습니다.

시연영상 보여드리도록 하겠습니다.
















